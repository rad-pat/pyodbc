name: Ubuntu build

on: [push, pull_request]

jobs:
  run_tests:
    name: Run tests on Python ${{ matrix.python-version }}
    # ubuntu-20.04 supports more versions of Python than ubuntu-22.04
    # https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    services:

      mssql2017:
        image: mcr.microsoft.com/mssql/server:2017-latest
        ports:
        - 1401:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: StrongPassword2017

      mssql2019:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
        - 1402:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: StrongPassword2019

      mssql2022:
        image: mcr.microsoft.com/mssql/server:2022-latest
        ports:
        - 1403:1433
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: StrongPassword2022


    steps:

    - name: Check initial setup
      run: |
        echo '*** echo $PATH'
        echo "$PATH"
        echo "*** odbcinst -j"
        odbcinst -j
        echo '*** ls -l /etc/odbc*.ini'
        ls -l /etc/odbc*.ini || true
        echo "*** cat /etc/odbcinst.ini"
        cat /etc/odbcinst.ini
        echo "*** cat /etc/odbc.ini"
        cat /etc/odbc.ini

    - name: Install ODBC driver for SQL Server
      run: |
        echo "*** apt-get install the driver"
        sudo ACCEPT_EULA=Y apt-get install --yes msodbcsql18
        echo '*** ls -l /usr/lib/x86_64-linux-gnu/odbc'
        ls -l /opt/microsoft/msodbcsql18/lib64 || true


    - name: Check ODBC setup
      run: |
        echo "*** odbcinst -j"
        odbcinst -j
        echo "*** cat /etc/odbcinst.ini"
        cat /etc/odbcinst.ini
        echo "*** cat /etc/odbc.ini"
        cat /etc/odbc.ini
        echo '*** ls -l /opt/microsoft/msodbcsql17/lib64'
        ls -l /opt/microsoft/msodbcsql17/lib64 || true
        echo '*** ls -l /opt/microsoft/msodbcsql18/lib64'
        ls -l /opt/microsoft/msodbcsql18/lib64 || true
        echo '*** ls -l /usr/lib/x86_64-linux-gnu/odbc'
        ls -l /usr/lib/x86_64-linux-gnu/odbc || true

    - name: Create test databases in SQL Server
      run: |
        echo "*** SQL Server 2017"
        docker exec -i "${{ job.services.mssql2017.id }}" /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2017' -Q "SELECT @@VERSION" || sleep 5
        docker exec -i "${{ job.services.mssql2017.id }}" /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2017' -Q "CREATE DATABASE test"
        echo "*** SQL Server 2019"
        docker exec -i "${{ job.services.mssql2019.id }}" /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2019' -C -Q "SELECT @@VERSION" || sleep 5
        docker exec -i "${{ job.services.mssql2019.id }}" /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2019' -C -Q "CREATE DATABASE test"
        echo "*** SQL Server 2022"
        docker exec -i "${{ job.services.mssql2022.id }}" /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2022' -C -Q "SELECT @@VERSION" || sleep 5
        docker exec -i "${{ job.services.mssql2022.id }}" /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2022' -C -Q "CREATE DATABASE test"



    - uses: actions/checkout@v4.1.1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.0.0
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true

    - name: Install Python dev dependencies
      # pyodbc doesn't have any Python dependencies, but we do need pytest for testing.
      run: |
        cd "$GITHUB_WORKSPACE"
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Build and install pyodbc
      run: |
        cd "$GITHUB_WORKSPACE"
        echo "*** current python version"
        python -VV
        echo "*** pip install"
        python -m pip install .
        echo "*** pip freeze"
        python -m pip freeze --all
        echo "*** pyodbc version"
        python -c "import pyodbc; print(pyodbc.version)"
        echo "*** pyodbc drivers"
        python -c "import pyodbc; print('\n'.join(sorted(pyodbc.drivers())))"



    - name: Run SQL Server 2017 tests
      env:
        PYODBC_SQLSERVER: "DRIVER={ODBC Driver 17 for SQL Server};SERVER=localhost,1401;UID=sa;PWD=StrongPassword2017;DATABASE=test"
      run: |
        cd "$GITHUB_WORKSPACE"
        python -m pytest "./tests/sqlserver_test.py"

    - name: Run SQL Server 2019 tests
      env:
        PYODBC_SQLSERVER: "DRIVER={ODBC Driver 18 for SQL Server};SERVER=localhost,1402;UID=sa;PWD=StrongPassword2019;DATABASE=test;Encrypt=Optional"
      run: |
        cd "$GITHUB_WORKSPACE"
        python -m pytest "./tests/sqlserver_test.py"

    - name: Run SQL Server 2022 tests
      env:
        PYODBC_SQLSERVER: "DRIVER={ODBC Driver 18 for SQL Server};SERVER=localhost,1403;UID=sa;PWD=StrongPassword2022;DATABASE=test;Encrypt=Optional"
      run: |
        cd "$GITHUB_WORKSPACE"
        python -m pytest "./tests/sqlserver_test.py"
